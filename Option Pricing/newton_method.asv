
% `newton_method` solves equation f(x)=0 and print out each iteration.
% f is the scalar function to solve
% df is the derivative function of f
% x0 is the initial point
% tol is 
function x = newton_method(f, df, x0, tol)
   n = 1;
   tol = 10^(-12);
   x(n) = x0;
   fn = f(x0);
   xn = [x0];
   fxn = [fn];
   while 1
       dn = -fn(n)/df(x(n));
       alpha = 1;
       fkn = f(x(n) + alpha * dn);
     while abs(fkn) >= abs(fn(n))
         alpha = alpha/2;
         fkn = f(x(n) + alpha * dn);
     end

     x(n+1) = x(n) + alpha*dn;
     fn(n+1) = fkn;
     n = n+1;
     xn = [xn;x(n)];
     fxn = [fxn; fn(n)];
     if (abs(fn(n)) <= tol || abs(x(n) - x(n-1)) <= tol)
         break
     end
   end
   n = [0:n-1]'
   t = table(n, xn, fxn)
   disp(t)
end
        
      
% Warrant Pricing
function q4
   format long
   K = 90;
   T = 2;
   sigma = 0.22;
   r = 0.02
   alpha = 0.5;
   s0 = 100;

   w = 1;
   k = 0; 
   t = [];

%4a
   while 1
       price = s0 + (1 -alpha)/alpha * w;
       [Call,~] = blsprice(price,K,r,T,sigma);
       rn = w - alpha* Call;
       w_next = alpha*Call;
       t = [t;[k, w, rn]];
       if abs(w - w_next) < 10^(-8)
           break
       end
       w = w_next

       k= k+1;
   end
   fprintf("n    wn     rn\n");
   t= table(t);
   disp(t);

%4b
   w = 1;
   k = 0;
   t = [];
   while 1
       price = s0 + (1 -alpha)/alpha * w;
       [Call,~] = blsprice(price,K,r,T,sigma);
       [Calldelta, ~] = blsdelta(price, K, r, T, sigma);
       f = w - alpha* Call; %function
       fd = 1 - (1-alpha)*Calldelta;
       w_next = w - f/fd;

       t = [t; [k ,w, f]];
       if abs(w - w_next) < 10^(-8)
           break
       end
       w = w_next;
       k= k+1;

   end
   fprintf("n    wn     rn\n");
   t= table(t);
   disp(t);
  
end

function q5
    format long
    load('PutData');
    vol = []
    for i = 1: length(K)
        vol = [vol; cal_vol(i, S(i), K(i), P(i), r(i), tau(i))]
    end
    n = length(K)
    n = [0:n-1]'
    vol = [n,vol];
   disp(table(vol))  
   scatter(K,vol(:,2));
    % plot
    title("implied volatility versus the strike");
    xlabel("strike"); ylabel("implied volatility");
end

function [v] = cal_vol(i, S, K, P, r, tau)
    % initialization
    sigma = sqrt(abs(log(S/K)+r.*tau).*2./tau);  %sigma0
    t= [];
    k = 0;
    while 1
        [~,put] = blsprice(S,K,r,tau,sigma,0);
        putvega = blsvega(S,K,r,tau,sigma,0);
        f = put-P;
        sigma_next = sigma - f/putvega;
        [v] = [sigma];
        if i == 226% the last row            
            t = [t; [k,f,sigma]]           
        end
                        
        if abs(sigma_next - sigma) < 10^(-8)
            break;
        end
        sigma = sigma_next;
        k = k+1;
    end
    
    if length(t)>1
    fprintf("  n    f   sigma\n");
    disp(table(t))
    end
end


